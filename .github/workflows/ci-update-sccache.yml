name: ci-update-sccache

on:
  push:
    branches: [master, release-*, gha-test-*]

defaults:
  run:
    shell: bash

env:
  max_threads: 16
  pre_command: cd /opt/git/diem/

jobs:
  update-sccache-osx:
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v2
        with:
          # This ensures that the tip of the PR is checked out instead of the merge between the base ref and the tip
          # On `push` this value will be empty and will "do-the-right-thing"
          ref: ${{ github.event.pull_request.head.sha }}
          fetch-depth: 0 #get all the history!!!
      - id: changes
        name: determine changes
        uses: ./.github/actions/changes
        with:
          workflow-file: ci-update-sccache.yml
      - id: rust-changes
        name: find rust/cargo changes.
        uses: ./.github/actions/matches
        with:
          pattern: '^documentation\|^docker\|^scripts\|^.circleci'
          invert: "true"
      - uses: ./.github/actions/build-setup
        if: ${{ steps.rust-changes.outputs.changes-found == 'true' }}
      - uses: actions/cache@v2
        if: ${{ steps.rust-changes.outputs.changes-found == 'true' }}
        with:
          path: "/opt/cargo/git\n/opt/cargo/registry\n/opt/cargo/.package-cache"
          key: crates-${{ runner.os }}-${{ hashFiles('Cargo.lock') }}
          restore-keys: "crates-${{ runner.os }}"
      - name: build all unit test code.
        if: ${{ steps.rust-changes.outputs.changes-found == 'true' }}
        run: |
          $pre_command && cargo x test --no-run --jobs ${max_threads} --unit
          echo stats:
          sccache -s
        env:
          SCCACHE_AWS_ACCESS_KEY_ID: ${{ secrets.SCCACHE_AWS_ACCESS_KEY_ID }}
          SCCACHE_AWS_SECRET_ACCESS_KEY: ${{ secrets.SCCACHE_AWS_SECRET_ACCESS_KEY }}
      - uses: ./.github/actions/build-teardown
        if: ${{ steps.rust-changes.outputs.changes-found == 'true' }}

  prepare:
    runs-on: ubuntu-latest
    outputs:
      changes-target-branch: ${{ steps.changes.outputs.changes-target-branch }}
      changes-base-githash: ${{ steps.changes.outputs.changes-base-githash }}
      changes-pull-request-number: ${{ steps.changes.outputs.changes-pull-request-number }}
      test-rust: ${{ steps.rust-changes.outputs.changes-found }}
      test-dev-setup: ${{ steps.dev-setup-sh-changes.outputs.changes-found }}
      test-website-build: ${{ steps.website-changes.outputs.changes-found }}
      test-non-rust-lint: ${{ steps.non-rust-lint-changes.outputs.changes-found }}
    steps:
      - uses: actions/checkout@v2
        with:
          # This ensures that the tip of the PR is checked out instead of the merge between the base ref and the tip
          # On `push` this value will be empty and will "do-the-right-thing"
          ref: ${{ github.event.pull_request.head.sha }}
          fetch-depth: 0 #get all the history!!!
      - name: Git Hooks and Checks
        run: ./scripts/git-checks.sh
      - id: changes
        name: determine changes
        uses: ./.github/actions/changes
        with:
          workflow-file: ci-update-sccache.yml
      - id: rust-changes
        name: find rust/cargo changes.
        uses: ./.github/actions/matches
        with:
          pattern: '^documentation\|^docker\|^scripts\|^.circleci'
          invert: "true"

  update-sccache-linux:
    runs-on: ubuntu-latest-xl
    needs: prepare
    if: ${{ needs.prepare.outputs.test-rust == 'true' }}
    container:
      image: diem/build_environment:master
      #${{ needs.prepare.outputs.changes-target-branch }}
      volumes:
        - "/home/runner/work/diem/diem:/opt/git/diem"
    steps:
      - uses: actions/checkout@v2
        with:
          ref: ${{ github.event.pull_request.head.sha }}
          fetch-depth: 0 #get all the history!!!
      - id: rust-changes
        name: find rust/cargo changes.
        uses: ./.github/actions/matches
        with:
          pattern: '^documentation\|^docker\|^scripts\|^.circleci'
          invert: "true"
      - uses: ./.github/actions/build-setup
      - uses: ./.github/actions/check-machine
        with:
          webhook-gha-hardware: ${{ secrets.WEBHOOK_GHA_HARDWARE }}
      - uses: actions/cache@v2.1.4
        with:
          path: "/opt/cargo/git\n/opt/cargo/registry\n/opt/cargo/.package-cache"
          key: crates-${{ runner.os }}-${{ hashFiles('Cargo.lock') }}
          restore-keys: "crates-${{ runner.os }}"
      - name: build all unit test code.
        run: |
          $pre_command && cargo x test --no-run --jobs ${max_threads} --unit
          echo stats:
          sccache -s
        env:
          SCCACHE_AWS_ACCESS_KEY_ID: ${{ secrets.SCCACHE_AWS_ACCESS_KEY_ID }}
          SCCACHE_AWS_SECRET_ACCESS_KEY: ${{ secrets.SCCACHE_AWS_SECRET_ACCESS_KEY }}
      - uses: ./.github/actions/build-teardown
